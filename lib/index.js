"use strict";

// For generating the coverage badge
var path = require("path");
var downloader = require("./downloader");
var reportParser = require("./istanbulReportParser");

// exporting the plugin main function
module.exports = istanbulCoberturaBadger;

/**
 * Creates a code coverage badge based on the cobertura report generated by istanbul.
 *
 * @param {Object} opts is the set of properties provided to the api.
 * @param {Function} callback is the CPS function to get the results.
 */
function istanbulCoberturaBadger(opts, callback) {
  opts = opts || {};
  // Setting the default coverage file generated by istanbul cobertura report.
  opts.istanbulReportFile = opts.istanbulReportFile || "./coverage/cobertura-coverage.xml";
  // The default location for the destination being the coverage directory from istanbul.
  opts.destinationDir = opts.destinationDir || "./coverage/";
  // The thresholds to be used to give colors to the badge.
  var defaultThresholds = {
    excelent: 90,
    good: 65
  };
  opts.thresholds = opts.thresholds || defaultThresholds;
  opts.thresholds.excelent = opts.thresholds.excelent || defaultThresholds.excelent;
  opts.thresholds.good = opts.thresholds.good || defaultThresholds.good;

  reportParser(opts.istanbulReportFile, function(err, report) {
    if (err) {
      return callback(err);
    }

    // The color depends on the fixed thresholds (RED: 0 >= % < 60) (YELLOW: 60 >= % < 90) (GREEN: % >= 90)
    var color = report.overallPercent >= opts.thresholds.excelent ? "brightgreen" :
      (report.overallPercent >= opts.thresholds.good ? "yellow" : "red");

    // The shields service that will give badges.
    var url = "http://img.shields.io/badge/coverage-" + report.overallPercent + "%-" + color + ".svg";

    // Save always as coverage image.
    var badgeFileName = path.join(opts.destinationDir, "coverage.svg");

    downloader(url, badgeFileName, function(err, downloadResult) {
      if (err) {
        return callback(err);
      }

      report.url = url;
      report.badgeFile = downloadResult;

      return callback(null, report);
    });
  });
}
