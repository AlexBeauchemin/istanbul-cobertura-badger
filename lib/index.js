"use strict";

// For generating the coverage badge
var path = require("path");
var downloader = require("./downloader");
var reportParser = require("./istanbulReportParser");

// exporting the plugin main function
module.exports = istanbulCoberturaBadger;

/**
 * Creates a code coverage badge based on the cobertura report generated by istanbul.
 *
 * @param {Object} opts is the set of properties provided to the api.
 * @param {Function} callback is the CPS function to get the results.
 */
function istanbulCoberturaBadger(opts, callback) {
  opts = opts || {};
  // Setting the default coverage file generated by istanbul cobertura report.
  opts.istanbulReportFile = opts.istanbulReportFile || "./coverage/cobertura-coverage.xml";
  // The default location for the destination being the coverage directory from istanbul.
  opts.destinationDir = opts.destinationDir || "./coverage/";

  reportParser(opts.istanbulReportFile, function(err, xml) {
    if (err) {
      return callback(err);
    }

    // Calculate the final percent based on the line and branch rates
    var overallPercentage = (((parseFloat(xml["line-rate"]) + parseFloat(xml["branch-rate"])) / 2) * 100).toFixed(0);

    // The color depends on the fixed thresholds (RED: 0 >= % < 60) (YELLOW: 60 >= % < 90) (GREEN: % >= 90)
    var color = overallPercentage >= 90 ? "brightgreen" : (overallPercentage >= 60 ? "yellow" : "red");

    // The shields service that will give badges.
    var url = "http://img.shields.io/badge/coverage-" + overallPercentage + "%-" + color + ".svg";

    // Save always as coverage image.
    var badgeFileName = path.join(opts.destinationDir, "coverage.svg");

    downloader(url, badgeFileName, callback);
  });
}
